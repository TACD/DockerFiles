# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from miro2_msg/funnel_web.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class funnel_web(genpy.Message):
  _md5sum = "d76c86fb9327536412ade3373c6dd88e"
  _type = "miro2_msg/funnel_web"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#	@section COPYRIGHT
#	Copyright (C) 2019 Consequential Robotics Ltd
#	
#	@section AUTHOR
#	Consequential Robotics http://consequentialrobotics.com
#	
#	@section LICENSE
#	For a full copy of the license agreement, and a complete
#	definition of "The Software", see LICENSE in the MDK root
#	directory.
#	
#	Subject to the terms of this Agreement, Consequential
#	Robotics grants to you a limited, non-exclusive, non-
#	transferable license, without right to sub-license, to use
#	"The Software" in accordance with this Agreement and any
#	other written agreement with Consequential Robotics.
#	Consequential Robotics does not transfer the title of "The
#	Software" to you; the license granted to you is not a sale.
#	This agreement is a binding legal agreement between
#	Consequential Robotics and the purchasers or users of "The
#	Software".
#	
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	
#
#	This message packages several messages for simple
#	delivery to the web client.



float32[2] cliff
float32[4] light
float32 sonar
uint16[2] touch
uint32[6] illum
float32 audio_level
uint16[3] tone




"""
  __slots__ = ['cliff','light','sonar','touch','illum','audio_level','tone']
  _slot_types = ['float32[2]','float32[4]','float32','uint16[2]','uint32[6]','float32','uint16[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cliff,light,sonar,touch,illum,audio_level,tone

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(funnel_web, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cliff is None:
        self.cliff = [0.] * 2
      if self.light is None:
        self.light = [0.] * 4
      if self.sonar is None:
        self.sonar = 0.
      if self.touch is None:
        self.touch = [0] * 2
      if self.illum is None:
        self.illum = [0] * 6
      if self.audio_level is None:
        self.audio_level = 0.
      if self.tone is None:
        self.tone = [0] * 3
    else:
      self.cliff = [0.] * 2
      self.light = [0.] * 4
      self.sonar = 0.
      self.touch = [0] * 2
      self.illum = [0] * 6
      self.audio_level = 0.
      self.tone = [0] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_2f().pack(*self.cliff))
      buff.write(_get_struct_4f().pack(*self.light))
      buff.write(_get_struct_f().pack(self.sonar))
      buff.write(_get_struct_2H().pack(*self.touch))
      buff.write(_get_struct_6I().pack(*self.illum))
      buff.write(_get_struct_f().pack(self.audio_level))
      buff.write(_get_struct_3H().pack(*self.tone))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      self.cliff = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 16
      self.light = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (self.sonar,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      self.touch = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 24
      self.illum = _get_struct_6I().unpack(str[start:end])
      start = end
      end += 4
      (self.audio_level,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 6
      self.tone = _get_struct_3H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.cliff.tostring())
      buff.write(self.light.tostring())
      buff.write(_get_struct_f().pack(self.sonar))
      buff.write(self.touch.tostring())
      buff.write(self.illum.tostring())
      buff.write(_get_struct_f().pack(self.audio_level))
      buff.write(self.tone.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      self.cliff = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 16
      self.light = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 4
      (self.sonar,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      self.touch = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 24
      self.illum = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=6)
      start = end
      end += 4
      (self.audio_level,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 6
      self.tone = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_6I = None
def _get_struct_6I():
    global _struct_6I
    if _struct_6I is None:
        _struct_6I = struct.Struct("<6I")
    return _struct_6I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3H = None
def _get_struct_3H():
    global _struct_3H
    if _struct_3H is None:
        _struct_3H = struct.Struct("<3H")
    return _struct_3H
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
